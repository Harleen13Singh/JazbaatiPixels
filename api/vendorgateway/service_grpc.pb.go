// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/vendorgateway/service.proto

package vendorgateway

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VendorGateway_UploadImage_FullMethodName = "/VendorGateway/UploadImage"
	VendorGateway_Chat_FullMethodName        = "/VendorGateway/Chat"
)

// VendorGatewayClient is the client API for VendorGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VendorGatewayClient interface {
	// UploadImage is useful to uplaad images with the respective vendors
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// Chat is useful to ask some questions from the vendor i.e. the bot
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
}

type vendorGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorGatewayClient(cc grpc.ClientConnInterface) VendorGatewayClient {
	return &vendorGatewayClient{cc}
}

func (c *vendorGatewayClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, VendorGateway_UploadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorGatewayClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, VendorGateway_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorGatewayServer is the server API for VendorGateway service.
// All implementations must embed UnimplementedVendorGatewayServer
// for forward compatibility
type VendorGatewayServer interface {
	// UploadImage is useful to uplaad images with the respective vendors
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// Chat is useful to ask some questions from the vendor i.e. the bot
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	mustEmbedUnimplementedVendorGatewayServer()
}

// UnimplementedVendorGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedVendorGatewayServer struct {
}

func (UnimplementedVendorGatewayServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedVendorGatewayServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedVendorGatewayServer) mustEmbedUnimplementedVendorGatewayServer() {}

// UnsafeVendorGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorGatewayServer will
// result in compilation errors.
type UnsafeVendorGatewayServer interface {
	mustEmbedUnimplementedVendorGatewayServer()
}

func RegisterVendorGatewayServer(s grpc.ServiceRegistrar, srv VendorGatewayServer) {
	s.RegisterService(&VendorGateway_ServiceDesc, srv)
}

func _VendorGateway_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorGatewayServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorGateway_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorGatewayServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorGateway_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorGatewayServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorGateway_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorGatewayServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorGateway_ServiceDesc is the grpc.ServiceDesc for VendorGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VendorGateway",
	HandlerType: (*VendorGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _VendorGateway_UploadImage_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _VendorGateway_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/vendorgateway/service.proto",
}
